Aula 1:

Criamos a classe [ApiCallResponse] que é um POJO pra receber os dados da API

A notação @SerializedName("nome-aqui") serve pra mapear um valor do json para o POJO caso o nome
do atributo seja diferente do nome no json

Criamos a Interface APiCall que será a implementação feita pelo retrofit

Implementamos a ApiCallService que ja existia pra fazer uma chamada GET à api


Aula 2:

Criamos a função fetchData() no viewmodel para baixar dados da API usando a ApiCallService

Criamos a função flatten() na ApiCallResponse que é responsável por mapear os dados retornados pela API em lista de objetos [ITEM] que são exibidos
no RecyclerView. O que é API faz pelo menos por hora é retornar as informações que foram passadas para ela, ou seja métodos, corpo e cabeçalho que
são enviados para a API do postman são retornados como resposta. Usando essas informações é possível praticar.

Foi necessário mudar o BASE_URL do projeto porque API disponibilizada pelo instrutor já não funciona mais

Aula 3-4:

Aprendemos sobre Loggin (para fins de depuração)
Intercept requests and responses and log them to the console
Levels:
• BASIC: request and response lines
• HEADERS: ↑ + headers
• BODY: ↑ + bodies
• NONE

A ApiCallService Foi modificada para incluir um objeto de login dentro do retrofit através do OKHttpclient

Aula 5: Url Resolution

BASE_URL should end in a '/'. Example: https://trello.api/v1/boards/
but if you forget to add it, retrofit will add it for you

Endpoint should not begin with a '/' it ends up messing with the final url
Example: 'cards' = correct, '/cards' = wrong.

when you set variables correctly:
BASE_URL = "https://trello.api/v1/boards/"
ENDPOINT = "cards"

retrofit gives you back a full url:
URL = "https://trello.api/v1/boards/cards"

But if you start your endpoint with an forward slash this is what you get:
URL = "https://trello.api/cards"
Notice that the entire path to the endpoint is gone

Aula 6:

@GET - request data from server.
Allows us to send parameters in the url itself.

@POST - add data to server
Allows us to send parameters in he body of request.

@PUT - add a resource on server like files
@DELETE - remove a resource from server
@OPTIONS - find out what options are available for a given endpoint
@HEAD - get metadata for a given endpoint
@PATCH - modify a resource on server

Aula 7:
Queries

in  the class we've learned how to use parameters in the queries we do to the api:

Static way through function annotation
 @Query("endpoint?param=value&otherparam=othervalue")
No way to change these at runtime. This approach is useful when you need to pass the same params to every single call.


Dynamic way through function's parameter annotation.
   @Get("endpoint")
     fun callToApi(
         @Query("param1") param1: String,
         @Query("param2") param2: Int?
     ): Call<ApiCallResponse>

The second param is an optional parameter,  if you pass null to an optional parameter retrofit won't
put it in the final URl.


The Multi parameter approach
@GET("endpoint")
fun callGetWithMapOfParams(@QueryMap params: Map<String, String>): Call<ApiCallResponse>

Here we can pass a  Map<paramName, paramValue> and retrofif with build the url based on it

